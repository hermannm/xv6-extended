#!/usr/bin/env python3

from gradelib import Runner, save, test, shell_script, run_tests

r = Runner(save("xv6.out"))


@test(1, "[MANDATORY] ttest 1: Hello World from Thread")
def test1():
    r.run_qemu(shell_script(["ttest 1"]))
    r.match("\[test1 enter\]", "Hello World", "\[test1 exit\]")  # noqa: W605


def no_two_match(matchlist):
    resultslist = [int(match, base=10) for match in matchlist]
    return len(set(resultslist)) == len(resultslist)


@test(1, "[MANDATORY] ttest 2: Hello World from multiple joined Threads")
def test2():
    r.run_qemu(
        shell_script(["ttest 2"]),
    )
    r.match("\[test2 enter\]", "\[test2 exit\]")  # noqa: W605
    r.match(
        "^Hello World from Thread (\d+)$",  # noqa: W605
        match_fn=no_two_match,
    )


@test(1, "[MANDATORY] ttest 3: Pass args and return results")
def test3():
    r.run_qemu(
        shell_script(["ttest 3"]),
    )
    r.match("\[test3 enter\]", "\[test3 exit\]")  # noqa: W605
    r.match(
        "^child args: a=(\d+), b=(\d+)$",  # noqa: W605
        "^child result: (\d+)$",  # noqa: W605
        "^parent result: (\d+)$",  # noqa: W605
        match_fn=lambda matches: int(matches[0]) + int(matches[1]) == int(matches[2])
        and int(matches[2]) == int(matches[3]),
    )


@test(1, "[MANDATORY] ttest 4: Race condition without locking")
def test4():
    r.run_qemu(
        shell_script(["ttest 4"]),
    )
    r.match(
        "^\[test4 enter\]$",  # noqa: W605
        "^race\_for\_state\[1\] 0$",  # noqa: W605
        "^race\_for\_state\[2\] 0$",  # noqa: W605
        "^race\_for\_state\[1\] 0$",  # noqa: W605
        "^race\_for\_state\[1\] 1$",  # noqa: W605
        "^race\_for\_state\[2\] 1$",  # noqa: W605
        "^race\_for\_state\[2\] 2$",  # noqa: W605
        "^\[test4 exit\]$",  # noqa: W605
    )


@test(1, "[MANDATORY] ttest 5: Race condition resolved")
def test5():
    r.run_qemu(
        shell_script(["ttest 5"]),
    )
    r.match(
        "^\[test5 enter\]$",  # noqa: W605
        "^no\_race\_for\_state\[1\] 0$",  # noqa: W605
        "^no\_race\_for\_state\[2\] 0$",  # noqa: W605
        "^no\_race\_for\_state\[1\] 0$",  # noqa: W605
        "^no\_race\_for\_state\[1\] 1$",  # noqa: W605
        "^no\_race\_for\_state\[2\] 1$",  # noqa: W605
        "^no\_race\_for\_state\[2\] 3$",  # noqa: W605
        "^\[test5 exit\]$",  # noqa: W605
    )


run_tests()
